/*
 * OpenTrans - public transport simulator
 * Copyright (c) 2011-2012 Invenzzia Group
 * 
 * OpenTrans is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * OpenTrans is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OpenTrans. If not, see <http://www.gnu.org/licenses/>.
 */
package org.invenzzia.opentrans.client.ui.explorer;

import javax.swing.JPanel;
import org.invenzzia.helium.gui.annotation.Card;
import org.invenzzia.helium.gui.mvc.IView;
import org.invenzzia.helium.gui.ui.trees.HeliumTreeController;
import org.invenzzia.helium.gui.ui.trees.HeliumTreeView;
import org.picocontainer.MutablePicoContainer;

/**
 * The project explorer view which provides the tree-based access to the
 * elements of Visitons project.
 * 
 * @author Tomasz JÄ™drzejewski
 */
@Card(position = "explorer", title = "Project")
public class ExplorerView extends JPanel implements IView<ExplorerController> {
	private ExplorerController controller;
	boolean attached = false;
	
	/**
	 * Creates new form ExplorerView
	 */
	public ExplorerView() {
		super();
		System.out.println("Empty explorer view controller.");
		this.initComponents();
	}
	
	public ExplorerView(ExplorerController controller) {
		this();
		this.setController(controller);
	}
	
	public void setProjectName(String name) {
		this.projectNameLabel.setText(name);
	}

	public String getProjectName() {
		return this.projectNameLabel.getText();
	}
	
	public final void setController(ExplorerController controller) {
		if(null != this.controller) {
			this.attached = false;
			this.controller.detachView(this);
		}
		this.controller = controller;
		if(null != this.controller) {
			this.attached = true;
			this.controller.attachView(this);
		}
	}
	
	@Override
	public ExplorerController getController() {
		return this.controller;
	}
	
	public void setTreeController(HeliumTreeController treeController) {
		this.treeView.setController(treeController);
	}
	
	public HeliumTreeController getTreeController() {
		return this.treeView.getController();
	}
	
	@Override
	public void addNotify() {
		super.addNotify();
		if(null != this.controller && !this.attached) {
			this.controller.attachView(this);
			this.attached = true;
		}
	}
	
	@Override
	public void removeNotify() {
		super.removeNotify();
		if(null != this.controller && this.attached) {
			this.controller.detachView(this);
			this.attached = false;
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
	 * method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectNameLabel = new javax.swing.JLabel();
        settingsButton = new javax.swing.JButton();
        explorerScrollPane = new javax.swing.JScrollPane();
        this.explorerScrollPane.setViewportView(this.treeView = new HeliumTreeView());

        projectNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        projectNameLabel.setText("Project name");

        settingsButton.setText("Settings");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(projectNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(explorerScrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(settingsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(projectNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(explorerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane explorerScrollPane;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JButton settingsButton;
    // End of variables declaration//GEN-END:variables
	private HeliumTreeView treeView;
}
