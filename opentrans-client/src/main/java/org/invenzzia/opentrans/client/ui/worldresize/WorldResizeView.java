/*
 * OpenTrans - public transport simulator
 * Copyright (c) 2011-2012 Invenzzia Group
 * 
 * OpenTrans is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * OpenTrans is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OpenTrans. If not, see <http://www.gnu.org/licenses/>.
 */
package org.invenzzia.opentrans.client.ui.worldresize;

import org.invenzzia.helium.gui.model.IDialogModel;
import org.invenzzia.helium.gui.mvc.IView;
import org.invenzzia.helium.gui.ui.dialog.Dialog;
import org.invenzzia.opentrans.visitons.world.World;

/**
 * This view provides the contents for the "World resize" dialog. It displays
 * the current minimap and four buttons allowing to resize the world in the
 * selected direction. We can either extend the dimensions or shrink it.
 * 
 * @author Tomasz Jędrzejewski
 */
@Dialog(
	title="Resize world",
	buttons = { IDialogModel.DialogButtons.BUTTON_OK }
)
public class WorldResizeView extends javax.swing.JPanel implements IView<WorldResizeController> {
	public static final int MODE_EXTEND = 0;
	public static final int MODE_SHRINK = 1;
	
	private WorldResizeController controller;
	private int mode = WorldResizeView.MODE_EXTEND;
	private World model = null;
	/**
	 * Segment usage map that was last retrieved from the model.
	 */
	private boolean usageMap[][];
	
	public WorldResizeView() {
		this.initComponents();
	}
	
	public void setController(WorldResizeController controller) {
		if(null != this.controller) {
			this.controller.detachView(this);
		}
		this.controller = controller;
		if(null != this.controller) {
			this.controller.attachView(this);
		}
	}
	
	@Override
	public WorldResizeController getController() {
		return this.controller;
	}
	
	public void setMode(int mode) {	
		switch(mode) {
			case WorldResizeView.MODE_EXTEND:
				this.leftResize.setText("←");
				this.rightResize.setText("→");
				this.topResize.setText("↑");
				this.bottomResize.setText("↓");
				break;
			case WorldResizeView.MODE_SHRINK:
				this.leftResize.setText("→");
				this.rightResize.setText("←");
				this.topResize.setText("↓");
				this.bottomResize.setText("↑");
				break;
			default:
				throw new IllegalArgumentException("Invalid view mode: MODE_EXTEND or MODE_SHRINK allowed.");
		}
		this.mode = mode;
		this.updateOperationAvailability();
	}
	
	public int getMode() {
		return this.mode;
	}
	
	public void setModel(World world) {
		this.model = world;
	}
	
	public World getModel() {
		return this.model;
	}
	
	/**
	 * Updates the state of the resizing buttons according to the map information retrieved from the model.
	 */
	public void updateOperationAvailability() {
		if(WorldResizeView.MODE_SHRINK == this.mode && null != this.model) {
			int dimX = this.model.getX();
			int dimY = this.model.getY();
			boolean topResizeEnabled = true;
			boolean bottomResizeEnabled = true;
			boolean leftResizeEnabled = true;
			boolean rightResizeEnabled = true;
			for(int i = 0; i < dimX; i++) {
				if(this.usageMap[i][0]) {
					topResizeEnabled = false;
				}
				if(this.usageMap[i][dimY - 1]) {
					bottomResizeEnabled = false;
				}
			}
			for(int i = 0; i < dimY; i++) {
				if(this.usageMap[0][i]) {
					leftResizeEnabled = false;
				}
				if(this.usageMap[dimX - 1][i]) {
					rightResizeEnabled = false;
				}
			}
			this.topResize.setEnabled(topResizeEnabled);
			this.bottomResize.setEnabled(bottomResizeEnabled);
			this.leftResize.setEnabled(leftResizeEnabled);
			this.rightResize.setEnabled(rightResizeEnabled);
		} else {
			this.topResize.setEnabled(true);
			this.bottomResize.setEnabled(true);
			this.leftResize.setEnabled(true);
			this.rightResize.setEnabled(true);
		}
	}
	
	public void refreshData() {
		if(null != this.model) {
			this.dimensionLabel.setText(Integer.toString(this.model.getX()) + " x " + Integer.toString(this.model.getY()) + " km");
			this.usageMap = this.model.exportSegmentUsage();
			this.minimap1.setData(this.usageMap);
		}
		this.minimap1.repaint();
		this.updateOperationAvailability();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
	 * method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                operationGroup = new javax.swing.ButtonGroup();
                toggleExtend = new javax.swing.JRadioButton();
                toggleShrink = new javax.swing.JRadioButton();
                topResize = new javax.swing.JButton();
                rightResize = new javax.swing.JButton();
                bottomResize = new javax.swing.JButton();
                leftResize = new javax.swing.JButton();
                minimap1 = new org.invenzzia.opentrans.client.ui.commons.Minimap();
                dimensionLabel = new javax.swing.JLabel();

                operationGroup.add(toggleExtend);
                toggleExtend.setSelected(true);
                toggleExtend.setText("Extend world");
                toggleExtend.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                toggleExtendActionPerformed(evt);
                        }
                });

                operationGroup.add(toggleShrink);
                toggleShrink.setText("Shrink world");
                toggleShrink.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                toggleShrinkActionPerformed(evt);
                        }
                });

                topResize.setText("↑");
                topResize.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                topResizeActionPerformed(evt);
                        }
                });

                rightResize.setText("→");
                rightResize.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                rightResizeActionPerformed(evt);
                        }
                });

                bottomResize.setText("↓");
                bottomResize.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                bottomResizeActionPerformed(evt);
                        }
                });

                leftResize.setText("←");
                leftResize.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                leftResizeActionPerformed(evt);
                        }
                });

                javax.swing.GroupLayout minimap1Layout = new javax.swing.GroupLayout(minimap1);
                minimap1.setLayout(minimap1Layout);
                minimap1Layout.setHorizontalGroup(
                        minimap1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
                );
                minimap1Layout.setVerticalGroup(
                        minimap1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
                );

                dimensionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                dimensionLabel.setText("1 x 1 km");

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(toggleExtend)
                                .addGap(18, 18, 18)
                                .addComponent(toggleShrink)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dimensionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(leftResize, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(minimap1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(topResize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(bottomResize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rightResize, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                );

                layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {leftResize, rightResize});

                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(toggleExtend)
                                        .addComponent(toggleShrink)
                                        .addComponent(dimensionLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(topResize)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(leftResize, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                                        .addComponent(minimap1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(rightResize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bottomResize))
                );

                layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bottomResize, topResize});

        }// </editor-fold>//GEN-END:initComponents

        private void toggleExtendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleExtendActionPerformed
		if(null != this.controller && this.toggleExtend.isSelected()) {
			this.controller.switchStateToExtend();
		}
        }//GEN-LAST:event_toggleExtendActionPerformed

        private void toggleShrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleShrinkActionPerformed
		if(null != this.controller && this.toggleShrink.isSelected()) {
			this.controller.switchStateToShrink();
		}
        }//GEN-LAST:event_toggleShrinkActionPerformed

        private void leftResizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftResizeActionPerformed
		if(null != this.controller) {
			this.controller.leftResize();
		}
        }//GEN-LAST:event_leftResizeActionPerformed

        private void topResizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topResizeActionPerformed
		if(null != this.controller) {
			this.controller.topResize();
		}
        }//GEN-LAST:event_topResizeActionPerformed

        private void rightResizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightResizeActionPerformed
		if(null != this.controller) {
			this.controller.rightResize();
		}
        }//GEN-LAST:event_rightResizeActionPerformed

        private void bottomResizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomResizeActionPerformed
		if(null != this.controller) {
			this.controller.bottomResize();
		}
        }//GEN-LAST:event_bottomResizeActionPerformed

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton bottomResize;
        private javax.swing.JLabel dimensionLabel;
        private javax.swing.JButton leftResize;
        private org.invenzzia.opentrans.client.ui.commons.Minimap minimap1;
        private javax.swing.ButtonGroup operationGroup;
        private javax.swing.JButton rightResize;
        private javax.swing.JRadioButton toggleExtend;
        private javax.swing.JRadioButton toggleShrink;
        private javax.swing.JButton topResize;
        // End of variables declaration//GEN-END:variables

}
