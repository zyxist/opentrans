/*
 * Copyright (C) 2013 Invenzzia Group <http://www.invenzzia.org/>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.invenzzia.opentrans.lightweight.ui.dialogs.means;

import java.util.LinkedHashSet;
import java.util.Set;
import javax.swing.ListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.invenzzia.opentrans.lightweight.annotations.Action;
import org.invenzzia.opentrans.lightweight.annotations.FormField;
import org.invenzzia.opentrans.visitons.data.MeanOfTransport.MeanOfTransportRecord;

/**
 *
 * @author Tomasz JÄ™drzejewski
 */
public class MeanOfTransportDialog extends javax.swing.JDialog {
	/**
	 * Currently selected mean of transport.
	 */
	private MeanOfTransportRecord selectedRecord;
	/**
	 * Listeners for the selection events.
	 */
	private Set<IItemListener> listeners = new LinkedHashSet<>();

	/**
	 * Creates new form MeanOfTransportDialog
	 */
	public MeanOfTransportDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
	}
	
	/**
	 * Adds a new listener of item events.
	 * 
	 * @param listener 
	 */
	public void addItemListener(IItemListener listener) {
		this.listeners.add(listener);
	}
	
	/**
	 * Removes an existing listener of item events.
	 * 
	 * @param listener 
	 */
	public void removeItemListener(IItemListener listener) {
		this.listeners.remove(listener);
	}
	
	/**
	 * Clears all item event listeners.
	 */
	public void removeItemListeners() {
		this.listeners.clear();
	}
	
	/**
	 * Sets the management model for the item list.
	 * 
	 * @param model 
	 */
	public void setModel(ListModel<MeanOfTransportRecord> model) {
		this.itemList.setModel(model);
	}
	
	/**
	 * Returns the current management model for the item list.
	 * 
	 * @return Current management model.
	 */
	public ListModel<MeanOfTransportRecord> getModel() {
		return this.itemList.getModel();
	}
	
	/**
	 * Returns the currently selected item or NULL, if no item is selected.
	 * 
	 * @return Selected item.
	 */
	public MeanOfTransportRecord getSelectedRecord() {
		return this.selectedRecord;
	}
	
	/**
	 * Disables the content of the form - no item is selected.
	 */
	public void disableForm() {
		this.nameField.setEnabled(false);
		this.maxSafeSpeedField.setEnabled(false);
		this.allowVehicleOvertakingCheckbox.setEnabled(false);
		this.overtakingSpeedPunishmentField.setEnabled(false);
		this.rollingFrictionCoefficientField.setEnabled(false);
		
		this.nameField.setText("");
		this.maxSafeSpeedField.setText("");
		this.overtakingSpeedPunishmentField.setText("");
		this.rollingFrictionCoefficientField.setText("");
		this.allowVehicleOvertakingCheckbox.setSelected(false);
		this.hasVehicleTypesCheckbox.setSelected(false);
	}
	
	/**
	 * Enables the content of the form for editing.
	 */
	public void enableForm() {
		this.nameField.setEnabled(true);
		this.maxSafeSpeedField.setEnabled(true);
		this.allowVehicleOvertakingCheckbox.setEnabled(true);
		this.overtakingSpeedPunishmentField.setEnabled(true);
		this.rollingFrictionCoefficientField.setEnabled(true);
	}
	
	/**
	 * Sets the new error message to display.
	 * 
	 * @param message New error message.
	 */
	public void setErrorMessage(String message) {
		this.errorLabel.setText(message);
	}
	
	/**
	 * Returns the currently displayed error message.
	 * 
	 * @return 
	 */
	public String getErrorMessage() {
		return this.errorLabel.getText();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
	 * method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
      // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
      private void initComponents() {

            jScrollPane1 = new javax.swing.JScrollPane();
            itemList = new javax.swing.JList();
            jPanel1 = new javax.swing.JPanel();
            jLabel1 = new javax.swing.JLabel();
            nameField = new javax.swing.JTextField();
            jLabel2 = new javax.swing.JLabel();
            rollingFrictionCoefficientField = new javax.swing.JTextField();
            jLabel3 = new javax.swing.JLabel();
            maxSafeSpeedField = new javax.swing.JTextField();
            allowVehicleOvertakingCheckbox = new javax.swing.JCheckBox();
            jLabel4 = new javax.swing.JLabel();
            overtakingSpeedPunishmentField = new javax.swing.JTextField();
            hasVehicleTypesCheckbox = new javax.swing.JCheckBox();
            errorLabel = new javax.swing.JLabel();
            addButton = new javax.swing.JButton();
            removeButton = new javax.swing.JButton();
            cancelButton = new javax.swing.JButton();
            helpButton = new javax.swing.JButton();
            okButton = new javax.swing.JButton();

            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            setTitle("Manage means of transport");

            itemList.setModel(new javax.swing.AbstractListModel() {
                  String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                  public int getSize() { return strings.length; }
                  public Object getElementAt(int i) { return strings[i]; }
            });
            itemList.addListSelectionListener(new ItemSelectionListener());
            jScrollPane1.setViewportView(itemList);

            jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Properties"));

            jLabel1.setText("Name:");

            nameField.setEnabled(false);

            jLabel2.setText("Rolling friction coefficient:");

            rollingFrictionCoefficientField.setEnabled(false);

            jLabel3.setText("Max. safe speed/radius coefficient:");

            maxSafeSpeedField.setEnabled(false);

            allowVehicleOvertakingCheckbox.setText("Allow vehicle overtaking");
            allowVehicleOvertakingCheckbox.setEnabled(false);

            jLabel4.setText("Overtaking speed punishment:");

            overtakingSpeedPunishmentField.setEnabled(false);

            hasVehicleTypesCheckbox.setText("Has vehicle types");
            hasVehicleTypesCheckbox.setEnabled(false);

            errorLabel.setForeground(new java.awt.Color(204, 0, 0));
            errorLabel.setText(" ");

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                  jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(nameField)
                              .addComponent(rollingFrictionCoefficientField)
                              .addComponent(maxSafeSpeedField)
                              .addComponent(overtakingSpeedPunishmentField)
                              .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                          .addComponent(hasVehicleTypesCheckbox)
                                          .addComponent(jLabel1)
                                          .addComponent(jLabel2)
                                          .addComponent(jLabel3)
                                          .addComponent(jLabel4)
                                          .addComponent(allowVehicleOvertakingCheckbox)
                                          .addComponent(errorLabel))
                                    .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
            );
            jPanel1Layout.setVerticalGroup(
                  jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rollingFrictionCoefficientField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxSafeSpeedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(overtakingSpeedPunishmentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(allowVehicleOvertakingCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(hasVehicleTypesCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(errorLabel)
                        .addContainerGap())
            );

            addButton.setText("Add");

            removeButton.setText("Remove");
            removeButton.setToolTipText("");

            cancelButton.setText("Cancel");
            cancelButton.setPreferredSize(new java.awt.Dimension(100, 25));

            helpButton.setText("Help");
            helpButton.setPreferredSize(new java.awt.Dimension(100, 25));

            okButton.setText("OK");
            okButton.setPreferredSize(new java.awt.Dimension(100, 25));

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                              .addGroup(layout.createSequentialGroup()
                                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                              .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                              .addGroup(layout.createSequentialGroup()
                                    .addGap(0, 177, Short.MAX_VALUE)
                                    .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
            );
            layout.setVerticalGroup(
                  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                              .addComponent(addButton)
                              .addComponent(removeButton)
                              .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
            );

            pack();
      }// </editor-fold>//GEN-END:initComponents
      // Variables declaration - do not modify//GEN-BEGIN:variables
      @Action("addAction")
      private javax.swing.JButton addButton;
      private javax.swing.JCheckBox allowVehicleOvertakingCheckbox;
      @Action("cancelAction")
      private javax.swing.JButton cancelButton;
      private javax.swing.JLabel errorLabel;
      private javax.swing.JCheckBox hasVehicleTypesCheckbox;
      @Action("helpAction")
      private javax.swing.JButton helpButton;
      private javax.swing.JList itemList;
      private javax.swing.JLabel jLabel1;
      private javax.swing.JLabel jLabel2;
      private javax.swing.JLabel jLabel3;
      private javax.swing.JLabel jLabel4;
      private javax.swing.JPanel jPanel1;
      private javax.swing.JScrollPane jScrollPane1;
      private javax.swing.JTextField maxSafeSpeedField;
      @FormField(name="name")
      private javax.swing.JTextField nameField;
      @Action("okAction")
      private javax.swing.JButton okButton;
      private javax.swing.JTextField overtakingSpeedPunishmentField;
      @Action("removeAction")
      private javax.swing.JButton removeButton;
      private javax.swing.JTextField rollingFrictionCoefficientField;
      // End of variables declaration//GEN-END:variables

	class ItemSelectionListener implements ListSelectionListener {

		@Override
		public void valueChanged(ListSelectionEvent e) {
			MeanOfTransportRecord record = (MeanOfTransportRecord) itemList.getSelectedValue();
			selectedRecord = record;
			
			final ItemEvent event = new ItemEvent(record);
			for(IItemListener listener: listeners) {
				listener.onItemSelected(event);
			}
		}
		
	}
	
	public static class ItemEvent {
		private final MeanOfTransportRecord record;
		
		public ItemEvent(MeanOfTransportRecord record) {
			this.record = record;
		}
		
		public MeanOfTransportRecord getRecord() {
			return this.record;
		}
		
		public boolean hasRecord() {
			return null != this.record;
		}
	}
	
	public static interface IItemListener {
		public void onItemSelected(ItemEvent event);
	}
}
