/*
 * Copyright (C) 2013 Invenzzia Group <http://www.invenzzia.org/>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.invenzzia.opentrans.lightweight.ui.navigator;

import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultListModel;

/**
 * Navigator panel is used for displaying various objects during the editor
 * operation. It has a switchable model, so it can show objects contextually.
 * 
 * @author Tomasz JÄ™drzejewski
 */
public class NavigatorPanel extends javax.swing.JPanel {
	/**
	 * The model used by the list. Can be null.
	 */
	private NavigatorModel model;
	/**
	 * Listeners of the navigator events.
	 */
	private Set<INavigatorListener> listeners = new HashSet<>(5);

	/**
	 * Creates new form NavigatorPanel
	 */
	public NavigatorPanel() {
		this.initComponents();
	}
	
	public void addNavigatorListener(INavigatorListener listener) {
		this.listeners.add(listener);
	}
	
	public void removeNavigatorListener(INavigatorListener listener) {
		this.listeners.remove(listener);
	}
	
	public void removeNavigatorListeners() {
		this.listeners.clear();
	}
	
	/**
	 * Sets the model for the navigator. The passed value can be null. We disable
	 * the panel then.
	 * 
	 * @param model 
	 */
	public void setModel(NavigatorModel model) {
		this.model = model;
		if(null == this.model) {
			this.objectTypeLabel.setEnabled(false);
			this.objectTypeLabel.setText("Nothing to show right now.");
			this.objectList.setEnabled(false);
			this.objectList.setModel(new DefaultListModel());
		} else {
			this.objectList.setEnabled(true);
			this.objectTypeLabel.setEnabled(true);
			this.objectTypeLabel.setText(model.getObjectName()+":");
			this.objectList.setModel(model);
		}
	}
	
	public NavigatorModel getModel() {
		return this.model;
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
	 * method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        objectTypeLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        objectList = new javax.swing.JList();

        objectTypeLabel.setText("Nothing to show right now.");
        objectTypeLabel.setEnabled(false);

        objectList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        objectList.setToolTipText("");
        objectList.setEnabled(false);
        objectList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                objectListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(objectList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(objectTypeLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(objectTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void objectListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_objectListValueChanged
		NavigatorEvent event = new NavigatorEvent(this.objectList.getSelectedValue());
		for(INavigatorListener listener: this.listeners) {
			listener.navigatorObjectSelected(event);
		}
    }//GEN-LAST:event_objectListValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList objectList;
    private javax.swing.JLabel objectTypeLabel;
    // End of variables declaration//GEN-END:variables
	
	/**
	 * The event data for the navigator events.
	 */
	public static final class NavigatorEvent {
		private final Object selectedObject;
		
		public NavigatorEvent(Object selectedObject) {
			this.selectedObject = selectedObject;
		}
		
		public Object getSelectedObject() {
			return this.selectedObject;
		}
	}

	/**
	 * Various events related to the navigator panel.
	 */
	public static interface INavigatorListener {
		/**
		 * The event is spawned, when an object is selected on a navigator list.
		 * 
		 * @param event 
		 */
		public void navigatorObjectSelected(NavigatorEvent event);
	}
}
