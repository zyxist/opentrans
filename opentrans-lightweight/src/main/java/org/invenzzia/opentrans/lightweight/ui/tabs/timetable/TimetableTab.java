/*
 * Copyright (C) 2013 Invenzzia Group <http://www.invenzzia.org/>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.invenzzia.opentrans.lightweight.ui.tabs.timetable;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Set;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.invenzzia.opentrans.lightweight.annotations.Action;
import org.invenzzia.opentrans.lightweight.model.IBatchModelListener;
import org.invenzzia.opentrans.lightweight.model.selectors.RouteSelectionModel;

/**
 * The contents of the panel for managing the lines and timetables.
 * 
 * @author Tomasz JÄ™drzejewski
 */
public class TimetableTab extends javax.swing.JPanel implements IBatchModelListener<TimetableTabModel> {
	/**
	 * Timetable event listeners.
	 */
	private Set<ITimetableTabListener> listeners;
	
	/**
	 * Creates new form TimetableTab
	 */
	public TimetableTab() {
		this.initComponents();
	}
	
	/**
	 * Adds a new timetable tab event listener.
	 *
	 * @param listener
	 */
	public void addTimetableTabListener(ITimetableTabListener listener) {
		this.listeners.add(listener);
	}

	/**
	 * Removes the existing timetable tab event listener.
	 *
	 * @param listener
	 */
	public void removeTimetableTabListener(ITimetableTabListener listener) {
		this.listeners.remove(listener);
	}

	/**
	 * Clears all the timetable tab event listeners.
	 */
	public void removeTimetableTabListeners() {
		this.listeners.clear();
	}
	
	/**
	 * Sets the model for the route selection box.
	 * 
	 * @param model 
	 */
	public void setRouteSelectionModel(RouteSelectionModel model) {
		this.routeSelectionBox.setModel(model);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        routeLabel = new javax.swing.JLabel();
        routeSelectionBox = new javax.swing.JComboBox();
        manageRoutesbutton = new javax.swing.JButton();
        serviceTypeButton = new javax.swing.JButton();
        servicePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        serviceTable = new javax.swing.JTable();
        addServiceButton = new javax.swing.JButton();
        editServiceButton = new javax.swing.JButton();
        removeServiceButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();

        routeLabel.setText("Route:");

        routeSelectionBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        this.routeSelectionBox.addItemListener(new RouteSelectionListener());

        manageRoutesbutton.setText("Manage");
        manageRoutesbutton.setMaximumSize(new java.awt.Dimension(130, 25));
        manageRoutesbutton.setMinimumSize(new java.awt.Dimension(130, 25));
        manageRoutesbutton.setPreferredSize(new java.awt.Dimension(130, 25));

        serviceTypeButton.setText("Service types");
        serviceTypeButton.setMaximumSize(new java.awt.Dimension(130, 25));
        serviceTypeButton.setMinimumSize(new java.awt.Dimension(130, 25));
        serviceTypeButton.setPreferredSize(new java.awt.Dimension(130, 25));

        servicePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Services"));

        serviceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "From", "At", "To", "At", "Brigade", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(serviceTable);

        javax.swing.GroupLayout servicePanelLayout = new javax.swing.GroupLayout(servicePanel);
        servicePanel.setLayout(servicePanelLayout);
        servicePanelLayout.setHorizontalGroup(
            servicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(servicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE)
                .addContainerGap())
        );
        servicePanelLayout.setVerticalGroup(
            servicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(servicePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addContainerGap())
        );

        addServiceButton.setText("Add");
        addServiceButton.setMaximumSize(new java.awt.Dimension(90, 25));
        addServiceButton.setMinimumSize(new java.awt.Dimension(90, 25));
        addServiceButton.setPreferredSize(new java.awt.Dimension(90, 25));

        editServiceButton.setText("Edit");
        editServiceButton.setMaximumSize(new java.awt.Dimension(90, 25));
        editServiceButton.setMinimumSize(new java.awt.Dimension(90, 25));
        editServiceButton.setPreferredSize(new java.awt.Dimension(90, 25));

        removeServiceButton.setText("Remove");
        removeServiceButton.setMaximumSize(new java.awt.Dimension(90, 25));
        removeServiceButton.setMinimumSize(new java.awt.Dimension(90, 25));
        removeServiceButton.setPreferredSize(new java.awt.Dimension(90, 25));

        copyButton.setText("Copy");
        copyButton.setMaximumSize(new java.awt.Dimension(90, 25));
        copyButton.setMinimumSize(new java.awt.Dimension(90, 25));
        copyButton.setPreferredSize(new java.awt.Dimension(90, 25));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(servicePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addServiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editServiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeServiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(routeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(routeSelectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(manageRoutesbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(serviceTypeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(routeLabel)
                    .addComponent(routeSelectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageRoutesbutton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serviceTypeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(servicePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(editServiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(removeServiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addServiceButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    @Action("addService")
    private javax.swing.JButton addServiceButton;
    private javax.swing.JButton copyButton;
    @Action("editService")
    private javax.swing.JButton editServiceButton;
    private javax.swing.JScrollPane jScrollPane1;
    @Action("manageRoutes")
    private javax.swing.JButton manageRoutesbutton;
    @Action("removeService")
    private javax.swing.JButton removeServiceButton;
    private javax.swing.JLabel routeLabel;
    private javax.swing.JComboBox routeSelectionBox;
    private javax.swing.JPanel servicePanel;
    private javax.swing.JTable serviceTable;
    @Action("serviceTypes")
    private javax.swing.JButton serviceTypeButton;
    // End of variables declaration//GEN-END:variables

	@Override
	public void modelDataAvailable(TimetableTabModel model) {
	}
	
	class RouteSelectionListener implements ItemListener {
		@Override
		public void itemStateChanged(ItemEvent e) {
			Object selectedItem = routeSelectionBox.getModel().getSelectedItem();
			if(null == selectedItem) {
				serviceTypeButton.setEnabled(false);
				addServiceButton.setEnabled(false);
				editServiceButton.setEnabled(false);
				removeServiceButton.setEnabled(false);
				copyButton.setEnabled(false);
			} else {
				serviceTypeButton.setEnabled(true);
				addServiceButton.setEnabled(true);
				editServiceButton.setEnabled(true);
				removeServiceButton.setEnabled(true);
				copyButton.setEnabled(true);
			}		}
	}
	
	public static class TimetableTabEvent {
	}
	
	/**
	 * Allows writing notification handlers about GUI state changes.
	 */
	public static interface ITimetableTabListener {
		/**
		 * Notifies that a course has been selected.
		 */
		public void courseSelected(TimetableTabEvent event);
		/**
		 * The user has clicked the 'Edit' button.
		 * 
		 * @param event 
		 */
		public void editRequested(TimetableTabEvent event);
	}
}
