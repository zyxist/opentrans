/*
 * Copyright (C) 2013 Invenzzia Group <http://www.invenzzia.org/>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.invenzzia.opentrans.lightweight.ui.workspace;

import java.util.HashSet;
import java.util.Set;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.invenzzia.helium.history.CommandInfo;
import org.invenzzia.opentrans.visitons.editing.ICommand;

/**
 *
 * @author Tomasz JÄ™drzejewski
 */
public class HistoryPanel extends javax.swing.JPanel {
	/**
	 * Listeners that are notified about GUI events produced by this panel.
	 */
	private Set<IHistoryListener> historyListeners = new HashSet<>();
	
	/**
	 * This flag allows disabling sending selection events.
	 */
	private boolean selectionAdjusting = false;
	
	/**
	 * Creates new form HistoryPanel
	 */
	public HistoryPanel() {
		this.initComponents();
	}
	
	/**
	 * Adds a new history listener.
	 * 
	 * @param listener 
	 */
	public void addHistoryListener(IHistoryListener listener) {
		this.historyListeners.add(listener);
	}
	
	/**
	 * Removes a history listener.
	 * 
	 * @param listener 
	 */
	public void removeHistoryListener(IHistoryListener listener) {
		this.historyListeners.remove(listener);
	}
	
	/**
	 * Removes all the history listeners.
	 */
	public void removeHistoryListeners() {
		this.historyListeners.clear();
	}
	
	/**
	 * Sets the model for the command list.
	 * 
	 * @param model 
	 */
	public void setHistoryModel(HistoryModel model) {
		this.commandList.setModel(model);
	}
	
	/**
	 * Sets the new selected command.
	 * 
	 * @param commandIndex 
	 */
	public void setSelectedCommand(int commandIndex) {
		this.selectionAdjusting = true;
		try {
			this.commandList.setSelectedIndex(commandIndex);
		} finally {
			this.selectionAdjusting = false;
		}
	}
	
	/**
	 * Allows enabling or disabling the 'undo' button.
	 * 
	 * @param enabled 
	 */
	public void setUndoEnabled(boolean enabled) {
		this.undoButton.setEnabled(enabled);
	}
	
	/**
	 * Allows enabling or disabling the 'redo' button.
	 * 
	 * @param enabled 
	 */
	public void setRedoEnabled(boolean enabled) {
		this.redoButton.setEnabled(enabled);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
	 * method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
      // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
      private void initComponents() {

            jScrollPane1 = new javax.swing.JScrollPane();
            commandList = new javax.swing.JList();
            commandList.addListSelectionListener(new HistorySelectionListener());
            undoButton = new javax.swing.JButton();
            redoButton = new javax.swing.JButton();
            clearHistoryButton = new javax.swing.JButton();

            commandList.setModel(new javax.swing.AbstractListModel() {
                  String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                  public int getSize() { return strings.length; }
                  public Object getElementAt(int i) { return strings[i]; }
            });
            commandList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            jScrollPane1.setViewportView(commandList);

            undoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/invenzzia/opentrans/gui/icons/medium/edit-undo.png"))); // NOI18N
            undoButton.setToolTipText("Undo (Ctrl+Z)");
            undoButton.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        undoButtonActionPerformed(evt);
                  }
            });

            redoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/invenzzia/opentrans/gui/icons/medium/edit-redo.png"))); // NOI18N
            redoButton.setToolTipText("Redo (Ctrl+Y)");
            redoButton.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        redoButtonActionPerformed(evt);
                  }
            });

            clearHistoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/invenzzia/opentrans/gui/icons/medium/edit-clear-history.png"))); // NOI18N
            clearHistoryButton.setToolTipText("Clear history");
            clearHistoryButton.addActionListener(new java.awt.event.ActionListener() {
                  public void actionPerformed(java.awt.event.ActionEvent evt) {
                        clearHistoryButtonActionPerformed(evt);
                  }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(undoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(redoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearHistoryButton)
                        .addContainerGap(109, Short.MAX_VALUE))
                  .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            );
            layout.setVerticalGroup(
                  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(undoButton)
                              .addComponent(redoButton)
                              .addComponent(clearHistoryButton))
                        .addContainerGap())
            );
      }// </editor-fold>//GEN-END:initComponents

      private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
		HistoryEvent event = new HistoryEvent(null);
		for(IHistoryListener listener: this.historyListeners) {
			listener.undoClicked(event);
		}
      }//GEN-LAST:event_undoButtonActionPerformed

      private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
		HistoryEvent event = new HistoryEvent(null);
		for(IHistoryListener listener: this.historyListeners) {
			listener.redoClicked(event);
		}
      }//GEN-LAST:event_redoButtonActionPerformed

      private void clearHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearHistoryButtonActionPerformed
		HistoryEvent event = new HistoryEvent(null);
		for(IHistoryListener listener: this.historyListeners) {
			listener.clearHistoryClicked(event);
		}
      }//GEN-LAST:event_clearHistoryButtonActionPerformed

      // Variables declaration - do not modify//GEN-BEGIN:variables
      private javax.swing.JButton clearHistoryButton;
      private javax.swing.JList commandList;
      private javax.swing.JScrollPane jScrollPane1;
      private javax.swing.JButton redoButton;
      private javax.swing.JButton undoButton;
      // End of variables declaration//GEN-END:variables

	class HistorySelectionListener implements ListSelectionListener {
		@Override
		public void valueChanged(ListSelectionEvent event) {
			if(!selectionAdjusting && !event.getValueIsAdjusting()) {
				CommandInfo<ICommand> cmd = (CommandInfo<ICommand>) commandList.getModel().getElementAt(commandList.getSelectedIndex());

				if(null == cmd) {
					cmd = (CommandInfo<ICommand>) commandList.getModel().getElementAt(commandList.getModel().getSize() - 1);
				}
				HistoryEvent historyEvent = new HistoryEvent(cmd);
				for(IHistoryListener listener: historyListeners) {
					listener.commandSelected(historyEvent);
				}
			}
		}
	}
	
	/**
	 * Carries information about a history operation performed by the user.
	 */
	public static class HistoryEvent {
		private CommandInfo<ICommand> command;
		
		public HistoryEvent(CommandInfo<ICommand> command) {
			this.command = command;
		}
		
		/**
		 * Returns the command that has been affected by the event, if applicable.
		 * 
		 * @return Affected command or null.
		 */
		public CommandInfo<ICommand> getCommand() {
			return this.command;
		}
	}
	
	/**
	 * Allows the controller listening for main operations provided by this panel.
	 */
	public static interface IHistoryListener {
		/**
		 * Notifies that the 'undo' button has been clicked.
		 * @param event 
		 */
		public void undoClicked(HistoryEvent event);
		/**
		 * Notifies that the 'redo' button has been clicked.
		 * @param event
		 */
		public void redoClicked(HistoryEvent event);
		/**
		 * Notifies that the 'clear history' button has been clicked.
		 * @param event 
		 */
		public void clearHistoryClicked(HistoryEvent event);
		/**
		 * Notifies that the command has been selected from the list.
		 * @param event 
		 */
		public void commandSelected(HistoryEvent event);
	}

}
