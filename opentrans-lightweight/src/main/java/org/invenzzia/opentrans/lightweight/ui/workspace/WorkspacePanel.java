/*
 * Copyright (C) 2013 Invenzzia Group <http://www.invenzzia.org/>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.invenzzia.opentrans.lightweight.ui.workspace;

import com.google.inject.Singleton;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import org.invenzzia.opentrans.lightweight.lf.icons.IIconClient;
import org.invenzzia.opentrans.lightweight.lf.icons.IconService;
import org.invenzzia.opentrans.lightweight.ui.component.AdvancedTabPane;
import org.invenzzia.opentrans.lightweight.ui.component.Minimap;
import org.invenzzia.opentrans.lightweight.ui.navigator.NavigatorPanel;

/**
 * The main window of the application.
 * 
 * @author Tomasz JÄ™drzejewski
 */
@Singleton
public class WorkspacePanel extends JPanel implements IIconClient {
	/**
	 * Provides icons for the panel.
	 */
	private IconService iconService;
	/**
	 * The panel displayed under the "History" name.
	 */
	private JPanel historyPanel;
	/**
	 * The panel displayed under the "Navigator" name.
	 */
	private JPanel navigatorPanel;

	/**
	 * Creates new form WorkspacePanel
	 */
	public WorkspacePanel() {
		this.initComponents();
	}
	
	/**
	 * Sets the content of the history tab.
	 * 
	 * @param panel New panel to add to this tab.
	 */
	public void setHistoryPanel(JPanel panel) {
		if(null != this.historyPanel) {
			this.extraTabs.remove(this.historyPanel);
		}
		this.historyPanel = panel;
		if(null != this.historyPanel) {
			this.extraTabs.add("History", this.historyPanel);
		}
	}
	
	public JPanel getHistoryPanel() {
		return this.historyPanel;
	}
	
	/**
	 * Sets the content of the 'Navigator' tab.
	 * 
	 * @param panel 
	 */
	public void setNavigatorPanel(JPanel panel) {
		if(null != this.navigatorPanel) {
			this.extraTabs.remove(this.navigatorPanel);
		}
		this.navigatorPanel = panel;
		if(null != this.navigatorPanel) {
			this.extraTabs.add("Navigator", this.navigatorPanel);
		}
	}
	
	/**
	 * Returns the current navigator panel.
	 * 
	 * @return 
	 */
	public JPanel getNavigatorPanel() {
		return this.navigatorPanel;
	}
	
	/**
	 * Returns the workspace splitter component.
	 * 
	 * @return Workspace splitter.
	 */
	public JSplitPane getWorkspaceSplitter() {
		return this.workspaceSplitter;
	}
	
	/**
	 * Returns the toolset splitter component.
	 * 
	 * @return Toolset splitter component.
	 */
	public JSplitPane getToolsetSplitter() {
		return this.toolsetSplitter;
	}
	
	/**
	 * Returns the desktop tabbed pane.
	 * 
	 * @return Dekstop pane.
	 */
	public AdvancedTabPane getDesktopTab() {
		return this.desktopTab;
	}
	
	/**
	 * Returns the minimap from the 'Minimap' tab.
	 * 
	 * @return 
	 */
	public Minimap getMinimap() {
		return this.minimapPreview;
	}
	
	/**
	 * Registers a listener that listens for the events from the buttons.
	 * 
	 * @param listener 
	 */
	public void addButtonListener(ActionListener listener) {
		this.projectButton.addActionListener(listener);
		this.worldButton.addActionListener(listener);
		this.infrastructureButton.addActionListener(listener);
		this.assignmentButton.addActionListener(listener);
		this.statsButton.addActionListener(listener);
		this.timetableButton.addActionListener(listener);
		this.vehicleButton.addActionListener(listener);
		this.passengerButton.addActionListener(listener);
	}
	
	/**
	 * Registers a listener that listens for the events from the buttons.
	 * 
	 * @param listener 
	 */
	public void removeButtonListener(ActionListener listener) {
		this.projectButton.removeActionListener(listener);
		this.worldButton.removeActionListener(listener);
		this.infrastructureButton.removeActionListener(listener);
		this.assignmentButton.removeActionListener(listener);
		this.statsButton.removeActionListener(listener);
		this.timetableButton.removeActionListener(listener);
		this.vehicleButton.removeActionListener(listener);
		this.passengerButton.removeActionListener(listener);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
	 * method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
      // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
      private void initComponents() {

            projectActionPanel = new javax.swing.JPanel();
            projectButton = new org.invenzzia.opentrans.lightweight.ui.component.IconButton();
            worldButton = new org.invenzzia.opentrans.lightweight.ui.component.IconButton();
            infrastructureButton = new org.invenzzia.opentrans.lightweight.ui.component.IconButton();
            vehicleButton = new org.invenzzia.opentrans.lightweight.ui.component.IconButton();
            timetableButton = new org.invenzzia.opentrans.lightweight.ui.component.IconButton();
            assignmentButton = new org.invenzzia.opentrans.lightweight.ui.component.IconButton();
            passengerButton = new org.invenzzia.opentrans.lightweight.ui.component.IconButton();
            statsButton = new org.invenzzia.opentrans.lightweight.ui.component.IconButton();
            workspaceSplitter = new javax.swing.JSplitPane();
            desktopTab = new org.invenzzia.opentrans.lightweight.ui.component.AdvancedTabPane();
            toolsetSplitter = new javax.swing.JSplitPane();
            extraTabs = new javax.swing.JTabbedPane();
            upperTabs = new javax.swing.JTabbedPane();
            minimapPreview = new org.invenzzia.opentrans.lightweight.ui.component.Minimap();

            projectActionPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));
            projectActionPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            projectActionPanel.setMaximumSize(new java.awt.Dimension(70, 32767));
            projectActionPanel.setMinimumSize(new java.awt.Dimension(70, 100));

            projectButton.setText("Project");
            projectButton.setName("project"); // NOI18N
            projectButton.setNextFocusableComponent(worldButton);
            projectButton.setSubtext("Project");

            worldButton.setText("World");
            worldButton.setName("world"); // NOI18N
            worldButton.setNextFocusableComponent(infrastructureButton);
            worldButton.setSubtext("World");

            infrastructureButton.setText("Infrastructure");
            infrastructureButton.setName("infrastructure"); // NOI18N
            infrastructureButton.setNextFocusableComponent(vehicleButton);
            infrastructureButton.setSubtext("Infrastructure");

            vehicleButton.setText("Vehicles");
            vehicleButton.setName("vehicles"); // NOI18N
            vehicleButton.setNextFocusableComponent(timetableButton);
            vehicleButton.setSubtext("Vehicles");

            timetableButton.setText("Timetable");
            timetableButton.setName("timetable"); // NOI18N
            timetableButton.setNextFocusableComponent(assignmentButton);
            timetableButton.setSubtext("Timetable");

            assignmentButton.setText("Assignments");
            assignmentButton.setName("assignments"); // NOI18N
            assignmentButton.setNextFocusableComponent(passengerButton);
            assignmentButton.setSubtext("Assignments");

            passengerButton.setText("Passengers");
            passengerButton.setName("passengers"); // NOI18N
            passengerButton.setNextFocusableComponent(statsButton);
            passengerButton.setSubtext("Passengers");

            statsButton.setText("Statistics");
            statsButton.setName("stats"); // NOI18N
            statsButton.setNextFocusableComponent(desktopTab);
            statsButton.setSubtext("statistics");

            javax.swing.GroupLayout projectActionPanelLayout = new javax.swing.GroupLayout(projectActionPanel);
            projectActionPanel.setLayout(projectActionPanelLayout);
            projectActionPanelLayout.setHorizontalGroup(
                  projectActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(worldButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(projectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(infrastructureButton, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                  .addComponent(vehicleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(timetableButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(assignmentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(passengerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(statsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            projectActionPanelLayout.setVerticalGroup(
                  projectActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(projectActionPanelLayout.createSequentialGroup()
                        .addComponent(projectButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(worldButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(infrastructureButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vehicleButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timetableButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assignmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passengerButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 315, Short.MAX_VALUE))
            );

            workspaceSplitter.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
            workspaceSplitter.setDividerLocation(500);
            workspaceSplitter.setDividerSize(5);
            workspaceSplitter.setResizeWeight(1.0);
            workspaceSplitter.setLeftComponent(desktopTab);

            toolsetSplitter.setDividerLocation(280);
            toolsetSplitter.setDividerSize(5);
            toolsetSplitter.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
            toolsetSplitter.setBottomComponent(extraTabs);

            minimapPreview.setPreferredSize(new java.awt.Dimension(250, 250));

            javax.swing.GroupLayout minimapPreviewLayout = new javax.swing.GroupLayout(minimapPreview);
            minimapPreview.setLayout(minimapPreviewLayout);
            minimapPreviewLayout.setHorizontalGroup(
                  minimapPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGap(0, 293, Short.MAX_VALUE)
            );
            minimapPreviewLayout.setVerticalGroup(
                  minimapPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGap(0, 252, Short.MAX_VALUE)
            );

            upperTabs.addTab("Minimap", minimapPreview);

            toolsetSplitter.setLeftComponent(upperTabs);

            workspaceSplitter.setRightComponent(toolsetSplitter);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                        .addComponent(projectActionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(workspaceSplitter, javax.swing.GroupLayout.DEFAULT_SIZE, 806, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(projectActionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(workspaceSplitter, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            );
      }// </editor-fold>//GEN-END:initComponents

      // Variables declaration - do not modify//GEN-BEGIN:variables
      private org.invenzzia.opentrans.lightweight.ui.component.IconButton assignmentButton;
      private org.invenzzia.opentrans.lightweight.ui.component.AdvancedTabPane desktopTab;
      private javax.swing.JTabbedPane extraTabs;
      private org.invenzzia.opentrans.lightweight.ui.component.IconButton infrastructureButton;
      private org.invenzzia.opentrans.lightweight.ui.component.Minimap minimapPreview;
      private org.invenzzia.opentrans.lightweight.ui.component.IconButton passengerButton;
      private javax.swing.JPanel projectActionPanel;
      private org.invenzzia.opentrans.lightweight.ui.component.IconButton projectButton;
      private org.invenzzia.opentrans.lightweight.ui.component.IconButton statsButton;
      private org.invenzzia.opentrans.lightweight.ui.component.IconButton timetableButton;
      private javax.swing.JSplitPane toolsetSplitter;
      private javax.swing.JTabbedPane upperTabs;
      private org.invenzzia.opentrans.lightweight.ui.component.IconButton vehicleButton;
      private javax.swing.JSplitPane workspaceSplitter;
      private org.invenzzia.opentrans.lightweight.ui.component.IconButton worldButton;
      // End of variables declaration//GEN-END:variables

	@Override
	public void setIconService(IconService iconService) {
		this.iconService = iconService;
		if(null != iconService) {
			this.projectActionPanel.setPreferredSize(new Dimension(85, 400));
			this.setIconFor(this.projectButton, this.iconService.getIcon("project-project"));
			this.setIconFor(this.worldButton, this.iconService.getIcon("project-world"));
			this.setIconFor(this.infrastructureButton, this.iconService.getIcon("project-infrastructure"));
			this.setIconFor(this.vehicleButton, this.iconService.getIcon("project-vehicles"));
			this.setIconFor(this.timetableButton, this.iconService.getIcon("project-timetable"));
			this.setIconFor(this.assignmentButton, this.iconService.getIcon("project-assignments"));
			this.setIconFor(this.passengerButton, this.iconService.getIcon("project-passenger"));
			this.setIconFor(this.statsButton, this.iconService.getIcon("project-stats"));
			this.revalidate();
		}
	}

	@Override
	public IconService getIconService() {
		return this.iconService;
	}
	
	private void setIconFor(JButton button, Icon icon) {
		button.setText("");
		button.setIcon(icon);
		button.setPreferredSize(new Dimension(80, 80));
	}
}
