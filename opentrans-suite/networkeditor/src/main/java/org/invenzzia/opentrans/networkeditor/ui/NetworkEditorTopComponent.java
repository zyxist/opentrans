/*
 * OpenTrans - public transport simulator
 * Copyright (c) 2011-2012 Invenzzia Group
 * 
 * Visitons is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Visitons is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Visitons. If not, see <http://www.gnu.org/licenses/>.
 */
package org.invenzzia.opentrans.networkeditor.ui;

import org.invenzzia.visitons.visualization.Camera;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;

/**
 * This top component contains the world camera that allows us editing the network
 * layout.
 */
@ConvertAsProperties(dtd = "-//org.invenzzia.opentrans.networkeditor.ui//NetworkEditor//EN",
autostore = false)
@TopComponent.Description(preferredID = "NetworkEditorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.invenzzia.opentrans.networkeditor.ui.NetworkEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_NetworkEditorAction", preferredID = "NetworkEditorTopComponent")
public final class NetworkEditorTopComponent extends TopComponent
{

	public NetworkEditorTopComponent()
	{
		this.initComponents();
		this.setName(NbBundle.getMessage(NetworkEditorTopComponent.class, "CTL_NetworkEditorTopComponent"));
		this.setToolTipText(NbBundle.getMessage(NetworkEditorTopComponent.class, "HINT_NetworkEditorTopComponent"));
		this.putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);

	} // end NetworkEditorTopComponent();

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        camera = new org.invenzzia.visitons.visualization.Camera();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(camera, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(camera, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.invenzzia.visitons.visualization.Camera camera;
    // End of variables declaration//GEN-END:variables
	@Override
	public void componentOpened()
	{
		// TODO add custom code on component opening
	} // end componentOpened();

	@Override
	public void componentClosed()
	{
		// TODO add custom code on component closing
	} // end componentClosed();

	void writeProperties(java.util.Properties p)
	{
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	} // end writeProperties();

	void readProperties(java.util.Properties p)
	{
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	} // end readProperties();
	
	/**
	 * @return The camera component.
	 */
	public Camera getCamera()
	{
		return this.camera;
	} // end getCamera();
} // end NetworkEditorTopComponent;
